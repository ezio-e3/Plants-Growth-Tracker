// <auto-generated />
using System;
using DigitalGarden.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitalGarden.Presentation.Migrations
{
    [DbContext(typeof(DigitalGardenContext))]
    [Migration("20230906113456_CreatedTables")]
    partial class CreatedTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DigitalGarden.Domain.Garden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GardenerId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GardenerId");

                    b.ToTable("Gardens");
                });

            modelBuilder.Entity("DigitalGarden.Domain.Gardener", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Gardeners");
                });

            modelBuilder.Entity("DigitalGarden.Domain.MaintenanceTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GardenId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GardenId");

                    b.HasIndex("PlantId");

                    b.ToTable("MaintenanceTasks");
                });

            modelBuilder.Entity("DigitalGarden.Domain.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("GardenId")
                        .HasColumnType("int");

                    b.Property<string>("GrowthCycle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantType")
                        .HasColumnType("int");

                    b.Property<string>("PlantingSeason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScientificName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SoilTypePreference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SunlightRequirement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WateringFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GardenId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("DigitalGarden.Domain.PlantRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatePlanted")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("PlantRecords");
                });

            modelBuilder.Entity("DigitalGarden.Domain.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GrowthStage")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PlantRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlantRecordId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DigitalGarden.Domain.Garden", b =>
                {
                    b.HasOne("DigitalGarden.Domain.Gardener", "Gardener")
                        .WithMany("Gardens")
                        .HasForeignKey("GardenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gardener");
                });

            modelBuilder.Entity("DigitalGarden.Domain.MaintenanceTask", b =>
                {
                    b.HasOne("DigitalGarden.Domain.Garden", "Garden")
                        .WithMany("Maintenances")
                        .HasForeignKey("GardenId");

                    b.HasOne("DigitalGarden.Domain.Plant", "Plant")
                        .WithMany("Maintenances")
                        .HasForeignKey("PlantId");

                    b.Navigation("Garden");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("DigitalGarden.Domain.Plant", b =>
                {
                    b.HasOne("DigitalGarden.Domain.Garden", "Garden")
                        .WithMany("Plants")
                        .HasForeignKey("GardenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garden");
                });

            modelBuilder.Entity("DigitalGarden.Domain.PlantRecord", b =>
                {
                    b.HasOne("DigitalGarden.Domain.Plant", "Plant")
                        .WithMany("PlantRecords")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("DigitalGarden.Domain.Review", b =>
                {
                    b.HasOne("DigitalGarden.Domain.PlantRecord", "PlantRecord")
                        .WithMany("PlantReviews")
                        .HasForeignKey("PlantRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantRecord");
                });

            modelBuilder.Entity("DigitalGarden.Domain.Garden", b =>
                {
                    b.Navigation("Maintenances");

                    b.Navigation("Plants");
                });

            modelBuilder.Entity("DigitalGarden.Domain.Gardener", b =>
                {
                    b.Navigation("Gardens");
                });

            modelBuilder.Entity("DigitalGarden.Domain.Plant", b =>
                {
                    b.Navigation("Maintenances");

                    b.Navigation("PlantRecords");
                });

            modelBuilder.Entity("DigitalGarden.Domain.PlantRecord", b =>
                {
                    b.Navigation("PlantReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
